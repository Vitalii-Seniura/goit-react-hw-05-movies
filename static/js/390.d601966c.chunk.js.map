{"version":3,"file":"static/js/390.d601966c.chunk.js","mappings":"8VACaA,EAAY,8BAEnBC,EAAS,mCAAG,kGAASC,EAAT,EAASA,SAAT,IAAmBC,MAAAA,OAAnB,MAA2B,CAAC,EAA5B,EAChBC,IAAAA,SAAAA,QAAyB,+BAEnBC,EAAc,IAAIC,iBAAJ,QAClBC,QAAS,oCACNJ,IALW,kBAOTC,IAAAA,IAAA,UACGF,EADH,YACeG,IACnBG,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJC,QAAQC,OAAR,iBAAyBH,EAASI,UAGP,IAAhCJ,EAASK,KAAKC,cACTJ,QAAQC,OAAO,8CAGjBH,EAASK,IACjB,IACAE,OAAM,SAAAC,GACL,OAAON,QAAQC,OAAOK,EACvB,KAtBa,2CAAH,sDAyBFC,EAAoB,WAC/B,OAAOjB,EAAU,CAAEC,SAAU,uBAC9B,EAEYiB,EAAyB,SAAAC,GACpC,OAAOnB,EAAU,CACfC,SAAU,gBACVC,MAAO,CAAEiB,MAAAA,IAEZ,EAEYC,EAAsB,SAAAC,GACjC,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,IAEvB,EACYC,EAAmB,SAAAD,GAC9B,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,EAAZ,aAEX,EAEYE,EAAsB,SAAAF,GACjC,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,EAAZ,aAEX,C,kFCjBD,UAhCgB,WACd,IAAQA,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAwCI,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACRL,EAAAA,EAAAA,IAAoBF,GACjBd,MAAK,YAAkB,IAAfsB,EAAc,EAAdA,QACPF,EAAgBE,EACjB,IACAd,OAAM,SAAAC,GAAG,OAAIc,QAAQC,IAAIf,EAAhB,GACb,GAAE,CAACK,KAGF,wBACI,OAACK,QAAD,IAACA,GAAAA,EAAcM,OACfN,EAAaO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAYC,EAApC,EAAoCA,WAApC,OACf,2BACE,uBAAIH,KACJ,qCAAaE,EAAWE,MAAM,EAAG,IAAIC,oBACpCF,IACC,qCAAaA,EAAWC,MAAM,EAAG,IAAIC,qBAEvC,uBAAIJ,MANGF,EADM,KAWjB,uCAIP,C","sources":["API.jsx","Pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nconst getMovies = async ({ pathName, param = {} }) => {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n  const searchParam = new URLSearchParams({\n    api_key: '52716180676151a953209f62b256c6ee',\n    ...param,\n  });\n  return axios\n    .get(`${pathName}?${searchParam}`)\n    .then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(`Error: ${response.message}`);\n      }\n\n      if (response.data.total_results === 0) {\n        return Promise.reject('Sorry, no matches found. Please try again.');\n      }\n\n      return response.data;\n    })\n    .catch(err => {\n      return Promise.reject(err);\n    });\n};\n\nexport const getTrendingMovies = () => {\n  return getMovies({ pathName: '/trending/movie/day' });\n};\n\nexport const getMoviesBySearchQuery = query => {\n  return getMovies({\n    pathName: '/search/movie',\n    param: { query },\n  });\n};\n\nexport const getMovieDetailsById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}`,\n  });\n};\nexport const getMovieCastById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}/credits`,\n  });\n};\n\nexport const getMovieReviewsById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}/reviews`,\n  });\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getMovieReviewsById } from '../../API';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState({});\n\n  useEffect(() => {\n    getMovieReviewsById(movieId)\n      .then(({ results }) => {\n        setMovieReviews(results);\n      })\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <ul>\n      {!!movieReviews?.length ? (\n        movieReviews.map(({ id, author, content, created_at, updated_at }) => (\n          <li key={id}>\n            <p>{author}</p>\n            <p>Created: {created_at.slice(0, 10).toLocaleString()}</p>\n            {updated_at && (\n              <p>Updated: {updated_at.slice(0, 10).toLocaleString()}</p>\n            )}\n            <p>{content}</p>\n          </li>\n        ))\n      ) : (\n        <p>No Reviews</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["IMAGE_URL","getMovies","pathName","param","axios","searchParam","URLSearchParams","api_key","then","response","status","Promise","reject","message","data","total_results","catch","err","getTrendingMovies","getMoviesBySearchQuery","query","getMovieDetailsById","movieId","getMovieCastById","getMovieReviewsById","useParams","useState","movieReviews","setMovieReviews","useEffect","results","console","log","length","map","id","author","content","created_at","updated_at","slice","toLocaleString"],"sourceRoot":""}