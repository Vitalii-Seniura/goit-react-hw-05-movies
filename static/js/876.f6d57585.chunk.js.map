{"version":3,"file":"static/js/876.f6d57585.chunk.js","mappings":"8VACaA,EAAY,8BAEnBC,EAAS,mCAAG,kGAASC,EAAT,EAASA,SAAT,IAAmBC,MAAAA,OAAnB,MAA2B,CAAC,EAA5B,EAChBC,IAAAA,SAAAA,QAAyB,+BAEnBC,EAAc,IAAIC,iBAAJ,QAClBC,QAAS,oCACNJ,IALW,kBAOTC,IAAAA,IAAA,UACGF,EADH,YACeG,IACnBG,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJC,QAAQC,OAAR,iBAAyBH,EAASI,UAGP,IAAhCJ,EAASK,KAAKC,cACTJ,QAAQC,OAAO,8CAGjBH,EAASK,IACjB,IACAE,OAAM,SAAAC,GACL,OAAON,QAAQC,OAAOK,EACvB,KAtBa,2CAAH,sDAyBFC,EAAoB,WAC/B,OAAOjB,EAAU,CAAEC,SAAU,uBAC9B,EAEYiB,EAAyB,SAAAC,GACpC,OAAOnB,EAAU,CACfC,SAAU,gBACVC,MAAO,CAAEiB,MAAAA,IAEZ,EAEYC,EAAsB,SAAAC,GACjC,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,IAEvB,EACYC,EAAmB,SAAAD,GAC9B,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,EAAZ,aAEX,EAEYE,EAAsB,SAAAF,GACjC,OAAOrB,EAAU,CACfC,SAAS,UAAD,OAAYoB,EAAZ,aAEX,C,kICtBD,EA3B2B,WACzB,OAA4CG,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACRV,EAAAA,EAAAA,MACGV,MAAK,YAAkB,IAAfqB,EAAc,EAAdA,QACPF,EAAkBE,EACnB,IACAb,OAAM,SAAAC,GAAG,OAAIa,EAAAA,GAAAA,MAAYb,EAAhB,GACb,GAAE,KAGD,iCACE,sDACE,OAACS,QAAD,IAACA,IAAAA,EAAgBK,UACjB,wBACGL,EAAeM,KAAI,SAAAC,GAAK,aACvB,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,UACE,kCAAoBF,EAAMG,aAA1B,QAAmCH,EAAMI,gBAAhCJ,EAAME,KADqBF,EAAME,GADrB,QASlC,ECpBD,EARa,WACX,OACE,2BACE,SAACG,EAAD,KAGL,C","sources":["API.jsx","components/TrendingMovies.jsx","Pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nconst getMovies = async ({ pathName, param = {} }) => {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n  const searchParam = new URLSearchParams({\n    api_key: '52716180676151a953209f62b256c6ee',\n    ...param,\n  });\n  return axios\n    .get(`${pathName}?${searchParam}`)\n    .then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(`Error: ${response.message}`);\n      }\n\n      if (response.data.total_results === 0) {\n        return Promise.reject('Sorry, no matches found. Please try again.');\n      }\n\n      return response.data;\n    })\n    .catch(err => {\n      return Promise.reject(err);\n    });\n};\n\nexport const getTrendingMovies = () => {\n  return getMovies({ pathName: '/trending/movie/day' });\n};\n\nexport const getMoviesBySearchQuery = query => {\n  return getMovies({\n    pathName: '/search/movie',\n    param: { query },\n  });\n};\n\nexport const getMovieDetailsById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}`,\n  });\n};\nexport const getMovieCastById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}/credits`,\n  });\n};\n\nexport const getMovieReviewsById = movieId => {\n  return getMovies({\n    pathName: `/movie/${movieId}/reviews`,\n  });\n};\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { Link } from 'react-router-dom';\nimport { getTrendingMovies } from '../API';\n\nconst TrendingMoviesList = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies()\n      .then(({ results }) => {\n        setTrendingMovies(results);\n      })\n      .catch(err => toast.error(err));\n  }, []);\n\n  return (\n    <>\n      <h3>Trending today (Top-20)</h3>\n      {!!trendingMovies?.length && (\n        <ul>\n          {trendingMovies.map(movie => (\n            <Link to={`/movies/${movie.id}`} key={movie.id}>\n              <li key={movie.id}>{movie.title ?? movie.original_title}</li>\n            </Link>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default TrendingMoviesList;\n","import TrendingMoviesList from '../../components/TrendingMovies';\n\nconst Home = () => {\n  return (\n    <main>\n      <TrendingMoviesList />\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["IMAGE_URL","getMovies","pathName","param","axios","searchParam","URLSearchParams","api_key","then","response","status","Promise","reject","message","data","total_results","catch","err","getTrendingMovies","getMoviesBySearchQuery","query","getMovieDetailsById","movieId","getMovieCastById","getMovieReviewsById","useState","trendingMovies","setTrendingMovies","useEffect","results","toast","length","map","movie","to","id","title","original_title","TrendingMovies"],"sourceRoot":""}